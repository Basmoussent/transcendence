version: '3.8'

services:
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    ports:
      - '2225:2225'
      - '2443:2443'
    volumes:
      - ./docker/nginx/nginx.conf.template:/etc/nginx/templates/nginx.conf.template:ro
      - ./docker/nginx/cors.conf.template:/etc/nginx/templates/includes/cors.conf.template:ro
      - ./docker/nginx/logs:/var/log/nginx
      - ./docker/nginx/certs:/etc/nginx/certs
      - ./docker/nginx/modsecurity:/var/log/modsecurity
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=2225
      - FRONTEND_HOST=frontend
      - FRONTEND_PORT=5173
      - BACKEND_HOST=backend
      - BACKEND_PORT=8000
      - MODSECURITY=on
      - MODSECURITY_RULE_ENGINE=on
      - MODSECURITY_AUDIT_ENGINE=on
      - MODSECURITY_AUDIT_LOG=/var/log/modsecurity/audit.log
      - MODSECURITY_PARANOIA_LEVEL=1
      - MODSECURITY_ANOMALY_SCORE_THRESHOLD=5
      - MODSECURITY_CRS_RULES=on
    depends_on:
      - backend
    networks:
      - app-network
    user: root

  vault:
    build:
      context: ./docker/vault
      dockerfile: Dockerfile
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./docker/vault/config.hcl:/vault/config/config.hcl:ro
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app:delegated
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app:delegated
      - backend_node_modules:/app/node_modules
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - DATABASE_URL=sqlite:///./database.sqlite
    depends_on:
      - prometheus
      - grafana
      - vault
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - app-network

  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9101:9101"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  frontend_node_modules:
  backend_node_modules:
  vault_data:
  modsecurity_logs: